# coding: utf-8

"""
IssuesApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class IssuesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def cancel_issue(self, issue_id, **kwargs):
        """
        Set a Issue to a cancelled status
        Closes a *Issue* with a cancelled status

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_issue(issue_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str issue_id: The primary key of the *Issue* to cancel. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_issue" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'issue_id' is set
        if ('issue_id' not in params) or (params['issue_id'] is None):
            raise ValueError("Missing the required parameter `issue_id` when calling `cancel_issue`")

        resource_path = '/issues/cancel/{issue_id}'.replace('{format}', 'json')
        path_params = {}
        if 'issue_id' in params:
            path_params['issue_id'] = params['issue_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_issue(self, **kwargs):
        """
        Creates a new Issue
        Creates a new *Issue*

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_issue(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Issue issues: Issue to create
        :return: IssueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issues']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_issue" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/issues/create'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'issues' in params:
            body_params = {'issues': params['issues']}

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IssueResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_issue_log(self, issue_id, notes, **kwargs):
        """
        Add a log to a Issue
        Logs notes to an *Issue*

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_issue_log(issue_id, notes, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str issue_id: The primary key of the related *Issue* (required)
        :param str notes: Notes to log against the *Issue* (required)
        :return: IssueLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id', 'notes']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_issue_log" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'issue_id' is set
        if ('issue_id' not in params) or (params['issue_id'] is None):
            raise ValueError("Missing the required parameter `issue_id` when calling `create_issue_log`")
        # verify the required parameter 'notes' is set
        if ('notes' not in params) or (params['notes'] is None):
            raise ValueError("Missing the required parameter `notes` when calling `create_issue_log`")

        resource_path = '/issues/log/create/{issue_id}'.replace('{format}', 'json')
        path_params = {}
        if 'issue_id' in params:
            path_params['issue_id'] = params['issue_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'notes' in params:
            form_params.append(('notes', params['notes']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IssueLogsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_issue(self, issue_id, **kwargs):
        """
        Returns a Issue
        Returns a *Issue* record

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_issue(issue_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str issue_id: The primary key of the *Issue* (required)
        :return: IssueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'issue_id' is set
        if ('issue_id' not in params) or (params['issue_id'] is None):
            raise ValueError("Missing the required parameter `issue_id` when calling `get_issue`")

        resource_path = '/issues/get/{issue_id}'.replace('{format}', 'json')
        path_params = {}
        if 'issue_id' in params:
            path_params['issue_id'] = params['issue_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IssueResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_issue_logs(self, issue_id, **kwargs):
        """
        Returns a collection of IssueLogs
        Returns a collection of *IssueLog* records

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_issue_logs(issue_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str issue_id: The primary key of the *Issue* (required)
        :return: IssueLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_logs" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'issue_id' is set
        if ('issue_id' not in params) or (params['issue_id'] is None):
            raise ValueError("Missing the required parameter `issue_id` when calling `get_issue_logs`")

        resource_path = '/issues/log/history/{issue_id}'.replace('{format}', 'json')
        path_params = {}
        if 'issue_id' in params:
            path_params['issue_id'] = params['issue_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IssueLogsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_issue_meta_categories(self, **kwargs):
        """
        Returns collection of categories
        Returns the categories available for an *Issue*

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_issue_meta_categories(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: EnumerationItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_meta_categories" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/issues/meta/categories'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EnumerationItemResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_issue_meta_resolutions(self, **kwargs):
        """
        Returns collection of resolutions
        Returns the resolutions available for an *Issue*

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_issue_meta_resolutions(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: EnumerationItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_meta_resolutions" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/issues/meta/resolutions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EnumerationItemResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_issue_meta_statuses(self, **kwargs):
        """
        Returns collection of statuses
        Returns the statuses available for an *Issue*

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_issue_meta_statuses(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: EnumerationItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_meta_statuses" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/issues/meta/statuses'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EnumerationItemResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_issue_meta_types(self, **kwargs):
        """
        Returns collection of types
        Returns the types available for an *Issue*

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_issue_meta_types(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: EnumerationItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_meta_types" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/issues/meta/types'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EnumerationItemResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_issue_status_history(self, issue_id, **kwargs):
        """
        Returns a collection of IssueStatuses
        Returns a collection of *IssueStatuse* records

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_issue_status_history(issue_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str issue_id: The primary key of the *Issue* (required)
        :return: IssueStatusesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_status_history" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'issue_id' is set
        if ('issue_id' not in params) or (params['issue_id'] is None):
            raise ValueError("Missing the required parameter `issue_id` when calling `get_issue_status_history`")

        resource_path = '/issues/status/history/{issue_id}'.replace('{format}', 'json')
        path_params = {}
        if 'issue_id' in params:
            path_params['issue_id'] = params['issue_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IssueStatusesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_issues(self, **kwargs):
        """
        Returns a collection of Issues
        Returns a collection of *Issue* records

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_issues(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: Pagination result limit (defaults to 10)
        :param int start: Pagination starting result number (defaults to 0)
        :param str members_id: Optionally limit result to this {members_id}
        :param str members_users_id: Optionally limit result to this {members_users_id}
        :param str members_locations_id: Optionally limit result to this {members_locations_id}
        :return: IssueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'start', 'members_id', 'members_users_id', 'members_locations_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issues" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/issues/get'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit'] if params['limit'] else 10
        if 'start' in params:
            query_params['start'] = params['start'] if params['start'] else 0
        if 'members_id' in params:
            query_params['members_id'] = params['members_id']
        if 'members_users_id' in params:
            query_params['members_users_id'] = params['members_users_id']
        if 'members_locations_id' in params:
            query_params['members_locations_id'] = params['members_locations_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IssueResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def resolve_issue(self, issue_id, **kwargs):
        """
        Set a Issue to a resolved status
        Closes a *Issue* with a resolved status

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.resolve_issue(issue_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str issue_id: The primary key of the *Issue* to resolve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resolve_issue" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'issue_id' is set
        if ('issue_id' not in params) or (params['issue_id'] is None):
            raise ValueError("Missing the required parameter `issue_id` when calling `resolve_issue`")

        resource_path = '/issues/resolve/{issue_id}'.replace('{format}', 'json')
        path_params = {}
        if 'issue_id' in params:
            path_params['issue_id'] = params['issue_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Boomtown-Date', 'X-Boomtown-Signature', 'X-Boomtown-Token']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
