# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class IssueLog(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IssueLog - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'issues_id': 'str',
            'diff_log': 'str',
            'notes': 'str',
            'created': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'issues_id': 'issues_id',
            'diff_log': 'diff_log',
            'notes': 'notes',
            'created': 'created'
        }

        self._id = None
        self._issues_id = None
        self._diff_log = None
        self._notes = None
        self._created = None

    @property
    def id(self):
        """
        Gets the id of this IssueLog.
        Primary key.

        :return: The id of this IssueLog.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this IssueLog.
        Primary key.

        :param id: The id of this IssueLog.
        :type: str
        """
        self._id = id

    @property
    def issues_id(self):
        """
        Gets the issues_id of this IssueLog.
        The primary key of the related *Issue*.

        :return: The issues_id of this IssueLog.
        :rtype: str
        """
        return self._issues_id

    @issues_id.setter
    def issues_id(self, issues_id):
        """
        Sets the issues_id of this IssueLog.
        The primary key of the related *Issue*.

        :param issues_id: The issues_id of this IssueLog.
        :type: str
        """
        self._issues_id = issues_id

    @property
    def diff_log(self):
        """
        Gets the diff_log of this IssueLog.
        Differences.

        :return: The diff_log of this IssueLog.
        :rtype: str
        """
        return self._diff_log

    @diff_log.setter
    def diff_log(self, diff_log):
        """
        Sets the diff_log of this IssueLog.
        Differences.

        :param diff_log: The diff_log of this IssueLog.
        :type: str
        """
        self._diff_log = diff_log

    @property
    def notes(self):
        """
        Gets the notes of this IssueLog.
        Notes.

        :return: The notes of this IssueLog.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this IssueLog.
        Notes.

        :param notes: The notes of this IssueLog.
        :type: str
        """
        self._notes = notes

    @property
    def created(self):
        """
        Gets the created of this IssueLog.
        Date created.

        :return: The created of this IssueLog.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this IssueLog.
        Date created.

        :param created: The created of this IssueLog.
        :type: datetime
        """
        self._created = created

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

