# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Member(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Member - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'name_legal': 'str',
            'street_1': 'str',
            'street_2': 'str',
            'city': 'str',
            'state': 'str',
            'zipcode': 'str',
            'email': 'str',
            'phone': 'str',
            'industry': 'str',
            'status': 'str',
            'created': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'name_legal': 'name_legal',
            'street_1': 'street_1',
            'street_2': 'street_2',
            'city': 'city',
            'state': 'state',
            'zipcode': 'zipcode',
            'email': 'email',
            'phone': 'phone',
            'industry': 'industry',
            'status': 'status',
            'created': 'created'
        }

        self._id = None
        self._name = None
        self._name_legal = None
        self._street_1 = None
        self._street_2 = None
        self._city = None
        self._state = None
        self._zipcode = None
        self._email = None
        self._phone = None
        self._industry = None
        self._status = None
        self._created = None

    @property
    def id(self):
        """
        Gets the id of this Member.
        Primary key.

        :return: The id of this Member.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Member.
        Primary key.

        :param id: The id of this Member.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Member.
        Business name.

        :return: The name of this Member.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Member.
        Business name.

        :param name: The name of this Member.
        :type: str
        """
        self._name = name

    @property
    def name_legal(self):
        """
        Gets the name_legal of this Member.
        Business legal name.

        :return: The name_legal of this Member.
        :rtype: str
        """
        return self._name_legal

    @name_legal.setter
    def name_legal(self, name_legal):
        """
        Sets the name_legal of this Member.
        Business legal name.

        :param name_legal: The name_legal of this Member.
        :type: str
        """
        self._name_legal = name_legal

    @property
    def street_1(self):
        """
        Gets the street_1 of this Member.
        Street address.

        :return: The street_1 of this Member.
        :rtype: str
        """
        return self._street_1

    @street_1.setter
    def street_1(self, street_1):
        """
        Sets the street_1 of this Member.
        Street address.

        :param street_1: The street_1 of this Member.
        :type: str
        """
        self._street_1 = street_1

    @property
    def street_2(self):
        """
        Gets the street_2 of this Member.
        Street address continued.

        :return: The street_2 of this Member.
        :rtype: str
        """
        return self._street_2

    @street_2.setter
    def street_2(self, street_2):
        """
        Sets the street_2 of this Member.
        Street address continued.

        :param street_2: The street_2 of this Member.
        :type: str
        """
        self._street_2 = street_2

    @property
    def city(self):
        """
        Gets the city of this Member.
        City.

        :return: The city of this Member.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Member.
        City.

        :param city: The city of this Member.
        :type: str
        """
        self._city = city

    @property
    def state(self):
        """
        Gets the state of this Member.
        State Identifier (2 char code).

        :return: The state of this Member.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Member.
        State Identifier (2 char code).

        :param state: The state of this Member.
        :type: str
        """
        self._state = state

    @property
    def zipcode(self):
        """
        Gets the zipcode of this Member.
        Postal Code.

        :return: The zipcode of this Member.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """
        Sets the zipcode of this Member.
        Postal Code.

        :param zipcode: The zipcode of this Member.
        :type: str
        """
        self._zipcode = zipcode

    @property
    def email(self):
        """
        Gets the email of this Member.
        Email address.

        :return: The email of this Member.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Member.
        Email address.

        :param email: The email of this Member.
        :type: str
        """
        self._email = email

    @property
    def phone(self):
        """
        Gets the phone of this Member.
        Phone number.

        :return: The phone of this Member.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this Member.
        Phone number.

        :param phone: The phone of this Member.
        :type: str
        """
        self._phone = phone

    @property
    def industry(self):
        """
        Gets the industry of this Member.
        Industry.

        :return: The industry of this Member.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """
        Sets the industry of this Member.
        Industry.

        :param industry: The industry of this Member.
        :type: str
        """
        self._industry = industry

    @property
    def status(self):
        """
        Gets the status of this Member.
        Status.

        :return: The status of this Member.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Member.
        Status.

        :param status: The status of this Member.
        :type: str
        """
        self._status = status

    @property
    def created(self):
        """
        Gets the created of this Member.
        Date created.

        :return: The created of this Member.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Member.
        Date created.

        :param created: The created of this Member.
        :type: datetime
        """
        self._created = created

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

