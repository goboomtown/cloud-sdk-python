# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ProviderTeam(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProviderTeam - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'nickname': 'str',
            'description': 'str',
            'email': 'str',
            'phone': 'str',
            'avatar': 'str',
            'auto_assign_route': 'bool',
            'auto_assign_sponsor': 'bool',
            'status': 'str',
            'type': 'str',
            'exclusive': 'bool',
            'published': 'bool',
            'published_name': 'str',
            'private_label': 'bool',
            'brand_color1': 'str',
            'brand_logo_1x': 'str',
            'brand_logo_2x': 'str',
            'brand_logo_3x': 'str',
            'support_email': 'str',
            'support_phone': 'str',
            'support_url': 'str',
            'created': 'datetime',
            'updated': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'nickname': 'nickname',
            'description': 'description',
            'email': 'email',
            'phone': 'phone',
            'avatar': 'avatar',
            'auto_assign_route': 'auto_assign_route',
            'auto_assign_sponsor': 'auto_assign_sponsor',
            'status': 'status',
            'type': 'type',
            'exclusive': 'exclusive',
            'published': 'published',
            'published_name': 'published_name',
            'private_label': 'private_label',
            'brand_color1': 'brand_color1',
            'brand_logo_1x': 'brand_logo_1x',
            'brand_logo_2x': 'brand_logo_2x',
            'brand_logo_3x': 'brand_logo_3x',
            'support_email': 'support_email',
            'support_phone': 'support_phone',
            'support_url': 'support_url',
            'created': 'created',
            'updated': 'updated'
        }

        self._id = None
        self._name = None
        self._nickname = None
        self._description = None
        self._email = None
        self._phone = None
        self._avatar = None
        self._auto_assign_route = None
        self._auto_assign_sponsor = None
        self._status = None
        self._type = None
        self._exclusive = None
        self._published = None
        self._published_name = None
        self._private_label = None
        self._brand_color1 = None
        self._brand_logo_1x = None
        self._brand_logo_2x = None
        self._brand_logo_3x = None
        self._support_email = None
        self._support_phone = None
        self._support_url = None
        self._created = None
        self._updated = None

    @property
    def id(self):
        """
        Gets the id of this ProviderTeam.
        Primary key.

        :return: The id of this ProviderTeam.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProviderTeam.
        Primary key.

        :param id: The id of this ProviderTeam.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ProviderTeam.
        Name.

        :return: The name of this ProviderTeam.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProviderTeam.
        Name.

        :param name: The name of this ProviderTeam.
        :type: str
        """
        self._name = name

    @property
    def nickname(self):
        """
        Gets the nickname of this ProviderTeam.
        Hashtag nickname for group mentions in chat.

        :return: The nickname of this ProviderTeam.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """
        Sets the nickname of this ProviderTeam.
        Hashtag nickname for group mentions in chat.

        :param nickname: The nickname of this ProviderTeam.
        :type: str
        """
        self._nickname = nickname

    @property
    def description(self):
        """
        Gets the description of this ProviderTeam.
        Description.

        :return: The description of this ProviderTeam.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProviderTeam.
        Description.

        :param description: The description of this ProviderTeam.
        :type: str
        """
        self._description = description

    @property
    def email(self):
        """
        Gets the email of this ProviderTeam.
        Email address.

        :return: The email of this ProviderTeam.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this ProviderTeam.
        Email address.

        :param email: The email of this ProviderTeam.
        :type: str
        """
        self._email = email

    @property
    def phone(self):
        """
        Gets the phone of this ProviderTeam.
        Primary contact phone number.

        :return: The phone of this ProviderTeam.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this ProviderTeam.
        Primary contact phone number.

        :param phone: The phone of this ProviderTeam.
        :type: str
        """
        self._phone = phone

    @property
    def avatar(self):
        """
        Gets the avatar of this ProviderTeam.
        URL to an avatar.

        :return: The avatar of this ProviderTeam.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """
        Sets the avatar of this ProviderTeam.
        URL to an avatar.

        :param avatar: The avatar of this ProviderTeam.
        :type: str
        """
        self._avatar = avatar

    @property
    def auto_assign_route(self):
        """
        Gets the auto_assign_route of this ProviderTeam.
        Automatically routes related merchant issues to this ProviderTeam.

        :return: The auto_assign_route of this ProviderTeam.
        :rtype: bool
        """
        return self._auto_assign_route

    @auto_assign_route.setter
    def auto_assign_route(self, auto_assign_route):
        """
        Sets the auto_assign_route of this ProviderTeam.
        Automatically routes related merchant issues to this ProviderTeam.

        :param auto_assign_route: The auto_assign_route of this ProviderTeam.
        :type: bool
        """
        self._auto_assign_route = auto_assign_route

    @property
    def auto_assign_sponsor(self):
        """
        Gets the auto_assign_sponsor of this ProviderTeam.
        Automatically assigns this ProviderTeam as the sponsor for related merchants.

        :return: The auto_assign_sponsor of this ProviderTeam.
        :rtype: bool
        """
        return self._auto_assign_sponsor

    @auto_assign_sponsor.setter
    def auto_assign_sponsor(self, auto_assign_sponsor):
        """
        Sets the auto_assign_sponsor of this ProviderTeam.
        Automatically assigns this ProviderTeam as the sponsor for related merchants.

        :param auto_assign_sponsor: The auto_assign_sponsor of this ProviderTeam.
        :type: bool
        """
        self._auto_assign_sponsor = auto_assign_sponsor

    @property
    def status(self):
        """
        Gets the status of this ProviderTeam.
        Status.

        :return: The status of this ProviderTeam.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ProviderTeam.
        Status.

        :param status: The status of this ProviderTeam.
        :type: str
        """
        self._status = status

    @property
    def type(self):
        """
        Gets the type of this ProviderTeam.
        Type / Category.

        :return: The type of this ProviderTeam.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ProviderTeam.
        Type / Category.

        :param type: The type of this ProviderTeam.
        :type: str
        """
        self._type = type

    @property
    def exclusive(self):
        """
        Gets the exclusive of this ProviderTeam.
        Exclusive within it's type / category.

        :return: The exclusive of this ProviderTeam.
        :rtype: bool
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive):
        """
        Sets the exclusive of this ProviderTeam.
        Exclusive within it's type / category.

        :param exclusive: The exclusive of this ProviderTeam.
        :type: bool
        """
        self._exclusive = exclusive

    @property
    def published(self):
        """
        Gets the published of this ProviderTeam.
        Published to the Connect App.

        :return: The published of this ProviderTeam.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """
        Sets the published of this ProviderTeam.
        Published to the Connect App.

        :param published: The published of this ProviderTeam.
        :type: bool
        """
        self._published = published

    @property
    def published_name(self):
        """
        Gets the published_name of this ProviderTeam.
        Name, as publushed in the Connect App.

        :return: The published_name of this ProviderTeam.
        :rtype: str
        """
        return self._published_name

    @published_name.setter
    def published_name(self, published_name):
        """
        Sets the published_name of this ProviderTeam.
        Name, as publushed in the Connect App.

        :param published_name: The published_name of this ProviderTeam.
        :type: str
        """
        self._published_name = published_name

    @property
    def private_label(self):
        """
        Gets the private_label of this ProviderTeam.
        Enable private label branding.

        :return: The private_label of this ProviderTeam.
        :rtype: bool
        """
        return self._private_label

    @private_label.setter
    def private_label(self, private_label):
        """
        Sets the private_label of this ProviderTeam.
        Enable private label branding.

        :param private_label: The private_label of this ProviderTeam.
        :type: bool
        """
        self._private_label = private_label

    @property
    def brand_color1(self):
        """
        Gets the brand_color1 of this ProviderTeam.
        Private label brand color, used if private_label is true.

        :return: The brand_color1 of this ProviderTeam.
        :rtype: str
        """
        return self._brand_color1

    @brand_color1.setter
    def brand_color1(self, brand_color1):
        """
        Sets the brand_color1 of this ProviderTeam.
        Private label brand color, used if private_label is true.

        :param brand_color1: The brand_color1 of this ProviderTeam.
        :type: str
        """
        self._brand_color1 = brand_color1

    @property
    def brand_logo_1x(self):
        """
        Gets the brand_logo_1x of this ProviderTeam.
        Private label logo, used if private_label is true.

        :return: The brand_logo_1x of this ProviderTeam.
        :rtype: str
        """
        return self._brand_logo_1x

    @brand_logo_1x.setter
    def brand_logo_1x(self, brand_logo_1x):
        """
        Sets the brand_logo_1x of this ProviderTeam.
        Private label logo, used if private_label is true.

        :param brand_logo_1x: The brand_logo_1x of this ProviderTeam.
        :type: str
        """
        self._brand_logo_1x = brand_logo_1x

    @property
    def brand_logo_2x(self):
        """
        Gets the brand_logo_2x of this ProviderTeam.
        Private label logo (x2), used if private_label is true.

        :return: The brand_logo_2x of this ProviderTeam.
        :rtype: str
        """
        return self._brand_logo_2x

    @brand_logo_2x.setter
    def brand_logo_2x(self, brand_logo_2x):
        """
        Sets the brand_logo_2x of this ProviderTeam.
        Private label logo (x2), used if private_label is true.

        :param brand_logo_2x: The brand_logo_2x of this ProviderTeam.
        :type: str
        """
        self._brand_logo_2x = brand_logo_2x

    @property
    def brand_logo_3x(self):
        """
        Gets the brand_logo_3x of this ProviderTeam.
        Private label logo (x3), used if private_label is true.

        :return: The brand_logo_3x of this ProviderTeam.
        :rtype: str
        """
        return self._brand_logo_3x

    @brand_logo_3x.setter
    def brand_logo_3x(self, brand_logo_3x):
        """
        Sets the brand_logo_3x of this ProviderTeam.
        Private label logo (x3), used if private_label is true.

        :param brand_logo_3x: The brand_logo_3x of this ProviderTeam.
        :type: str
        """
        self._brand_logo_3x = brand_logo_3x

    @property
    def support_email(self):
        """
        Gets the support_email of this ProviderTeam.
        Primary support email address.

        :return: The support_email of this ProviderTeam.
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """
        Sets the support_email of this ProviderTeam.
        Primary support email address.

        :param support_email: The support_email of this ProviderTeam.
        :type: str
        """
        self._support_email = support_email

    @property
    def support_phone(self):
        """
        Gets the support_phone of this ProviderTeam.
        Primary support phone number.

        :return: The support_phone of this ProviderTeam.
        :rtype: str
        """
        return self._support_phone

    @support_phone.setter
    def support_phone(self, support_phone):
        """
        Sets the support_phone of this ProviderTeam.
        Primary support phone number.

        :param support_phone: The support_phone of this ProviderTeam.
        :type: str
        """
        self._support_phone = support_phone

    @property
    def support_url(self):
        """
        Gets the support_url of this ProviderTeam.
        Primary support website.

        :return: The support_url of this ProviderTeam.
        :rtype: str
        """
        return self._support_url

    @support_url.setter
    def support_url(self, support_url):
        """
        Sets the support_url of this ProviderTeam.
        Primary support website.

        :param support_url: The support_url of this ProviderTeam.
        :type: str
        """
        self._support_url = support_url

    @property
    def created(self):
        """
        Gets the created of this ProviderTeam.
        Date created.

        :return: The created of this ProviderTeam.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this ProviderTeam.
        Date created.

        :param created: The created of this ProviderTeam.
        :type: datetime
        """
        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this ProviderTeam.
        Date last updated.

        :return: The updated of this ProviderTeam.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this ProviderTeam.
        Date last updated.

        :param updated: The updated of this ProviderTeam.
        :type: datetime
        """
        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

