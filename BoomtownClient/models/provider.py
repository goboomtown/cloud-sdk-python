# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Provider(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Provider - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'name_legal': 'str',
            'nickname': 'str',
            'comm_id': 'str',
            'description': 'str',
            'street_1': 'str',
            'street_2': 'str',
            'city': 'str',
            'state': 'str',
            'zipcode': 'str',
            'latitude': 'float',
            'longitude': 'float',
            'default_partners_teams_id': 'str',
            'email': 'str',
            'phone': 'str',
            'website': 'str',
            'avatar': 'str',
            'created': 'datetime',
            'updated': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'name_legal': 'name_legal',
            'nickname': 'nickname',
            'comm_id': 'comm_id',
            'description': 'description',
            'street_1': 'street_1',
            'street_2': 'street_2',
            'city': 'city',
            'state': 'state',
            'zipcode': 'zipcode',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'default_partners_teams_id': 'default_partners_teams_id',
            'email': 'email',
            'phone': 'phone',
            'website': 'website',
            'avatar': 'avatar',
            'created': 'created',
            'updated': 'updated'
        }

        self._id = None
        self._name = None
        self._name_legal = None
        self._nickname = None
        self._comm_id = None
        self._description = None
        self._street_1 = None
        self._street_2 = None
        self._city = None
        self._state = None
        self._zipcode = None
        self._latitude = None
        self._longitude = None
        self._default_partners_teams_id = None
        self._email = None
        self._phone = None
        self._website = None
        self._avatar = None
        self._created = None
        self._updated = None

    @property
    def id(self):
        """
        Gets the id of this Provider.
        Primary key.

        :return: The id of this Provider.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Provider.
        Primary key.

        :param id: The id of this Provider.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Provider.
        Business name.

        :return: The name of this Provider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Provider.
        Business name.

        :param name: The name of this Provider.
        :type: str
        """
        self._name = name

    @property
    def name_legal(self):
        """
        Gets the name_legal of this Provider.
        Business legal name.

        :return: The name_legal of this Provider.
        :rtype: str
        """
        return self._name_legal

    @name_legal.setter
    def name_legal(self, name_legal):
        """
        Sets the name_legal of this Provider.
        Business legal name.

        :param name_legal: The name_legal of this Provider.
        :type: str
        """
        self._name_legal = name_legal

    @property
    def nickname(self):
        """
        Gets the nickname of this Provider.
        Hashtag nickname for group mentions in chat.

        :return: The nickname of this Provider.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """
        Sets the nickname of this Provider.
        Hashtag nickname for group mentions in chat.

        :param nickname: The nickname of this Provider.
        :type: str
        """
        self._nickname = nickname

    @property
    def comm_id(self):
        """
        Gets the comm_id of this Provider.
        The communication channel id.

        :return: The comm_id of this Provider.
        :rtype: str
        """
        return self._comm_id

    @comm_id.setter
    def comm_id(self, comm_id):
        """
        Sets the comm_id of this Provider.
        The communication channel id.

        :param comm_id: The comm_id of this Provider.
        :type: str
        """
        self._comm_id = comm_id

    @property
    def description(self):
        """
        Gets the description of this Provider.
        Description.

        :return: The description of this Provider.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Provider.
        Description.

        :param description: The description of this Provider.
        :type: str
        """
        self._description = description

    @property
    def street_1(self):
        """
        Gets the street_1 of this Provider.
        Street address.

        :return: The street_1 of this Provider.
        :rtype: str
        """
        return self._street_1

    @street_1.setter
    def street_1(self, street_1):
        """
        Sets the street_1 of this Provider.
        Street address.

        :param street_1: The street_1 of this Provider.
        :type: str
        """
        self._street_1 = street_1

    @property
    def street_2(self):
        """
        Gets the street_2 of this Provider.
        Street address continued.

        :return: The street_2 of this Provider.
        :rtype: str
        """
        return self._street_2

    @street_2.setter
    def street_2(self, street_2):
        """
        Sets the street_2 of this Provider.
        Street address continued.

        :param street_2: The street_2 of this Provider.
        :type: str
        """
        self._street_2 = street_2

    @property
    def city(self):
        """
        Gets the city of this Provider.
        City.

        :return: The city of this Provider.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Provider.
        City.

        :param city: The city of this Provider.
        :type: str
        """
        self._city = city

    @property
    def state(self):
        """
        Gets the state of this Provider.
        State Identifier (2 char code).

        :return: The state of this Provider.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Provider.
        State Identifier (2 char code).

        :param state: The state of this Provider.
        :type: str
        """
        self._state = state

    @property
    def zipcode(self):
        """
        Gets the zipcode of this Provider.
        Postal Code.

        :return: The zipcode of this Provider.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """
        Sets the zipcode of this Provider.
        Postal Code.

        :param zipcode: The zipcode of this Provider.
        :type: str
        """
        self._zipcode = zipcode

    @property
    def latitude(self):
        """
        Gets the latitude of this Provider.
        Business location latitude.

        :return: The latitude of this Provider.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """
        Sets the latitude of this Provider.
        Business location latitude.

        :param latitude: The latitude of this Provider.
        :type: float
        """
        self._latitude = latitude

    @property
    def longitude(self):
        """
        Gets the longitude of this Provider.
        Business location longitude.

        :return: The longitude of this Provider.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """
        Sets the longitude of this Provider.
        Business location longitude.

        :param longitude: The longitude of this Provider.
        :type: float
        """
        self._longitude = longitude

    @property
    def default_partners_teams_id(self):
        """
        Gets the default_partners_teams_id of this Provider.
        Default ProviderTeam's id.

        :return: The default_partners_teams_id of this Provider.
        :rtype: str
        """
        return self._default_partners_teams_id

    @default_partners_teams_id.setter
    def default_partners_teams_id(self, default_partners_teams_id):
        """
        Sets the default_partners_teams_id of this Provider.
        Default ProviderTeam's id.

        :param default_partners_teams_id: The default_partners_teams_id of this Provider.
        :type: str
        """
        self._default_partners_teams_id = default_partners_teams_id

    @property
    def email(self):
        """
        Gets the email of this Provider.
        Email address.

        :return: The email of this Provider.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Provider.
        Email address.

        :param email: The email of this Provider.
        :type: str
        """
        self._email = email

    @property
    def phone(self):
        """
        Gets the phone of this Provider.
        Primary contact phone number.

        :return: The phone of this Provider.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this Provider.
        Primary contact phone number.

        :param phone: The phone of this Provider.
        :type: str
        """
        self._phone = phone

    @property
    def website(self):
        """
        Gets the website of this Provider.
        Business website/URL.

        :return: The website of this Provider.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """
        Sets the website of this Provider.
        Business website/URL.

        :param website: The website of this Provider.
        :type: str
        """
        self._website = website

    @property
    def avatar(self):
        """
        Gets the avatar of this Provider.
        URL to an avatar.

        :return: The avatar of this Provider.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """
        Sets the avatar of this Provider.
        URL to an avatar.

        :param avatar: The avatar of this Provider.
        :type: str
        """
        self._avatar = avatar

    @property
    def created(self):
        """
        Gets the created of this Provider.
        Date created.

        :return: The created of this Provider.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Provider.
        Date created.

        :param created: The created of this Provider.
        :type: datetime
        """
        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this Provider.
        Date last updated.

        :return: The updated of this Provider.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Provider.
        Date last updated.

        :param updated: The updated of this Provider.
        :type: datetime
        """
        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

