# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class MemberUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MemberUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'members_id': 'str',
            'members_locations_id': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'full_name': 'str',
            'email': 'str',
            'sms_number': 'str',
            'lang': 'str',
            'status': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'members_id': 'members_id',
            'members_locations_id': 'members_locations_id',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'full_name': 'full_name',
            'email': 'email',
            'sms_number': 'sms_number',
            'lang': 'lang',
            'status': 'status'
        }

        self._id = None
        self._members_id = None
        self._members_locations_id = None
        self._first_name = None
        self._last_name = None
        self._full_name = None
        self._email = None
        self._sms_number = None
        self._lang = None
        self._status = None

    @property
    def id(self):
        """
        Gets the id of this MemberUser.
        Primary key.

        :return: The id of this MemberUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MemberUser.
        Primary key.

        :param id: The id of this MemberUser.
        :type: str
        """
        self._id = id

    @property
    def members_id(self):
        """
        Gets the members_id of this MemberUser.
        The primary key of the related *Merchant*.

        :return: The members_id of this MemberUser.
        :rtype: str
        """
        return self._members_id

    @members_id.setter
    def members_id(self, members_id):
        """
        Sets the members_id of this MemberUser.
        The primary key of the related *Merchant*.

        :param members_id: The members_id of this MemberUser.
        :type: str
        """
        self._members_id = members_id

    @property
    def members_locations_id(self):
        """
        Gets the members_locations_id of this MemberUser.
        The primary key of the related *MerchantLocation*.

        :return: The members_locations_id of this MemberUser.
        :rtype: str
        """
        return self._members_locations_id

    @members_locations_id.setter
    def members_locations_id(self, members_locations_id):
        """
        Sets the members_locations_id of this MemberUser.
        The primary key of the related *MerchantLocation*.

        :param members_locations_id: The members_locations_id of this MemberUser.
        :type: str
        """
        self._members_locations_id = members_locations_id

    @property
    def first_name(self):
        """
        Gets the first_name of this MemberUser.
        First name.

        :return: The first_name of this MemberUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this MemberUser.
        First name.

        :param first_name: The first_name of this MemberUser.
        :type: str
        """
        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this MemberUser.
        Last name.

        :return: The last_name of this MemberUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this MemberUser.
        Last name.

        :param last_name: The last_name of this MemberUser.
        :type: str
        """
        self._last_name = last_name

    @property
    def full_name(self):
        """
        Gets the full_name of this MemberUser.
        Concatenation of first and last name.

        :return: The full_name of this MemberUser.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this MemberUser.
        Concatenation of first and last name.

        :param full_name: The full_name of this MemberUser.
        :type: str
        """
        self._full_name = full_name

    @property
    def email(self):
        """
        Gets the email of this MemberUser.
        Email address.

        :return: The email of this MemberUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this MemberUser.
        Email address.

        :param email: The email of this MemberUser.
        :type: str
        """
        self._email = email

    @property
    def sms_number(self):
        """
        Gets the sms_number of this MemberUser.
        SMS capable phone number.

        :return: The sms_number of this MemberUser.
        :rtype: str
        """
        return self._sms_number

    @sms_number.setter
    def sms_number(self, sms_number):
        """
        Sets the sms_number of this MemberUser.
        SMS capable phone number.

        :param sms_number: The sms_number of this MemberUser.
        :type: str
        """
        self._sms_number = sms_number

    @property
    def lang(self):
        """
        Gets the lang of this MemberUser.
        Language.

        :return: The lang of this MemberUser.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """
        Sets the lang of this MemberUser.
        Language.

        :param lang: The lang of this MemberUser.
        :type: str
        """
        self._lang = lang

    @property
    def status(self):
        """
        Gets the status of this MemberUser.
        Status.

        :return: The status of this MemberUser.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this MemberUser.
        Status.

        :param status: The status of this MemberUser.
        :type: str
        """
        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

