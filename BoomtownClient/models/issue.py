# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Issue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Issue - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'reference_num': 'str',
            'members_id': 'str',
            'members_name': 'str',
            'members_email': 'str',
            'members_locations_id': 'str',
            'members_locations_name': 'str',
            'members_users_id': 'str',
            'members_users_name': 'str',
            'members_users_email': 'str',
            'type': 'str',
            'category': 'str',
            'details': 'str',
            'status': 'str',
            'job': 'str',
            'resolution': 'str',
            'created': 'datetime',
            'updated': 'datetime',
            'enroute_time': 'datetime',
            'scheduled_time': 'datetime',
            'arrival_time': 'datetime',
            'departure_time': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'reference_num': 'reference_num',
            'members_id': 'members_id',
            'members_name': 'members_name',
            'members_email': 'members_email',
            'members_locations_id': 'members_locations_id',
            'members_locations_name': 'members_locations_name',
            'members_users_id': 'members_users_id',
            'members_users_name': 'members_users_name',
            'members_users_email': 'members_users_email',
            'type': 'type',
            'category': 'category',
            'details': 'details',
            'status': 'status',
            'job': 'job',
            'resolution': 'resolution',
            'created': 'created',
            'updated': 'updated',
            'enroute_time': 'enroute_time',
            'scheduled_time': 'scheduled_time',
            'arrival_time': 'arrival_time',
            'departure_time': 'departure_time'
        }

        self._id = None
        self._reference_num = None
        self._members_id = None
        self._members_name = None
        self._members_email = None
        self._members_locations_id = None
        self._members_locations_name = None
        self._members_users_id = None
        self._members_users_name = None
        self._members_users_email = None
        self._type = None
        self._category = None
        self._details = None
        self._status = None
        self._job = None
        self._resolution = None
        self._created = None
        self._updated = None
        self._enroute_time = None
        self._scheduled_time = None
        self._arrival_time = None
        self._departure_time = None

    @property
    def id(self):
        """
        Gets the id of this Issue.
        Primary key.

        :return: The id of this Issue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Issue.
        Primary key.

        :param id: The id of this Issue.
        :type: str
        """
        self._id = id

    @property
    def reference_num(self):
        """
        Gets the reference_num of this Issue.
        Reference number.

        :return: The reference_num of this Issue.
        :rtype: str
        """
        return self._reference_num

    @reference_num.setter
    def reference_num(self, reference_num):
        """
        Sets the reference_num of this Issue.
        Reference number.

        :param reference_num: The reference_num of this Issue.
        :type: str
        """
        self._reference_num = reference_num

    @property
    def members_id(self):
        """
        Gets the members_id of this Issue.
        The primary key of the related *Merchant*.

        :return: The members_id of this Issue.
        :rtype: str
        """
        return self._members_id

    @members_id.setter
    def members_id(self, members_id):
        """
        Sets the members_id of this Issue.
        The primary key of the related *Merchant*.

        :param members_id: The members_id of this Issue.
        :type: str
        """
        self._members_id = members_id

    @property
    def members_name(self):
        """
        Gets the members_name of this Issue.


        :return: The members_name of this Issue.
        :rtype: str
        """
        return self._members_name

    @members_name.setter
    def members_name(self, members_name):
        """
        Sets the members_name of this Issue.


        :param members_name: The members_name of this Issue.
        :type: str
        """
        self._members_name = members_name

    @property
    def members_email(self):
        """
        Gets the members_email of this Issue.


        :return: The members_email of this Issue.
        :rtype: str
        """
        return self._members_email

    @members_email.setter
    def members_email(self, members_email):
        """
        Sets the members_email of this Issue.


        :param members_email: The members_email of this Issue.
        :type: str
        """
        self._members_email = members_email

    @property
    def members_locations_id(self):
        """
        Gets the members_locations_id of this Issue.
        The primary key of the related *MerchantLocation*.

        :return: The members_locations_id of this Issue.
        :rtype: str
        """
        return self._members_locations_id

    @members_locations_id.setter
    def members_locations_id(self, members_locations_id):
        """
        Sets the members_locations_id of this Issue.
        The primary key of the related *MerchantLocation*.

        :param members_locations_id: The members_locations_id of this Issue.
        :type: str
        """
        self._members_locations_id = members_locations_id

    @property
    def members_locations_name(self):
        """
        Gets the members_locations_name of this Issue.


        :return: The members_locations_name of this Issue.
        :rtype: str
        """
        return self._members_locations_name

    @members_locations_name.setter
    def members_locations_name(self, members_locations_name):
        """
        Sets the members_locations_name of this Issue.


        :param members_locations_name: The members_locations_name of this Issue.
        :type: str
        """
        self._members_locations_name = members_locations_name

    @property
    def members_users_id(self):
        """
        Gets the members_users_id of this Issue.
        The primary key of the related *MerchantUser*.

        :return: The members_users_id of this Issue.
        :rtype: str
        """
        return self._members_users_id

    @members_users_id.setter
    def members_users_id(self, members_users_id):
        """
        Sets the members_users_id of this Issue.
        The primary key of the related *MerchantUser*.

        :param members_users_id: The members_users_id of this Issue.
        :type: str
        """
        self._members_users_id = members_users_id

    @property
    def members_users_name(self):
        """
        Gets the members_users_name of this Issue.


        :return: The members_users_name of this Issue.
        :rtype: str
        """
        return self._members_users_name

    @members_users_name.setter
    def members_users_name(self, members_users_name):
        """
        Sets the members_users_name of this Issue.


        :param members_users_name: The members_users_name of this Issue.
        :type: str
        """
        self._members_users_name = members_users_name

    @property
    def members_users_email(self):
        """
        Gets the members_users_email of this Issue.


        :return: The members_users_email of this Issue.
        :rtype: str
        """
        return self._members_users_email

    @members_users_email.setter
    def members_users_email(self, members_users_email):
        """
        Sets the members_users_email of this Issue.


        :param members_users_email: The members_users_email of this Issue.
        :type: str
        """
        self._members_users_email = members_users_email

    @property
    def type(self):
        """
        Gets the type of this Issue.
        Type.

        :return: The type of this Issue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Issue.
        Type.

        :param type: The type of this Issue.
        :type: str
        """
        self._type = type

    @property
    def category(self):
        """
        Gets the category of this Issue.
        Category.

        :return: The category of this Issue.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this Issue.
        Category.

        :param category: The category of this Issue.
        :type: str
        """
        self._category = category

    @property
    def details(self):
        """
        Gets the details of this Issue.
        Details.

        :return: The details of this Issue.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this Issue.
        Details.

        :param details: The details of this Issue.
        :type: str
        """
        self._details = details

    @property
    def status(self):
        """
        Gets the status of this Issue.
        Status.

        :return: The status of this Issue.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Issue.
        Status.

        :param status: The status of this Issue.
        :type: str
        """
        self._status = status

    @property
    def job(self):
        """
        Gets the job of this Issue.
        Job type.

        :return: The job of this Issue.
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """
        Sets the job of this Issue.
        Job type.

        :param job: The job of this Issue.
        :type: str
        """
        self._job = job

    @property
    def resolution(self):
        """
        Gets the resolution of this Issue.
        Resolution type.

        :return: The resolution of this Issue.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """
        Sets the resolution of this Issue.
        Resolution type.

        :param resolution: The resolution of this Issue.
        :type: str
        """
        self._resolution = resolution

    @property
    def created(self):
        """
        Gets the created of this Issue.
        Date created.

        :return: The created of this Issue.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Issue.
        Date created.

        :param created: The created of this Issue.
        :type: datetime
        """
        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this Issue.
        Date last updated.

        :return: The updated of this Issue.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Issue.
        Date last updated.

        :param updated: The updated of this Issue.
        :type: datetime
        """
        self._updated = updated

    @property
    def enroute_time(self):
        """
        Gets the enroute_time of this Issue.
        Actual technician travel time.

        :return: The enroute_time of this Issue.
        :rtype: datetime
        """
        return self._enroute_time

    @enroute_time.setter
    def enroute_time(self, enroute_time):
        """
        Sets the enroute_time of this Issue.
        Actual technician travel time.

        :param enroute_time: The enroute_time of this Issue.
        :type: datetime
        """
        self._enroute_time = enroute_time

    @property
    def scheduled_time(self):
        """
        Gets the scheduled_time of this Issue.
        Date/time scheduled.

        :return: The scheduled_time of this Issue.
        :rtype: datetime
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """
        Sets the scheduled_time of this Issue.
        Date/time scheduled.

        :param scheduled_time: The scheduled_time of this Issue.
        :type: datetime
        """
        self._scheduled_time = scheduled_time

    @property
    def arrival_time(self):
        """
        Gets the arrival_time of this Issue.
        Technician arrival time.

        :return: The arrival_time of this Issue.
        :rtype: datetime
        """
        return self._arrival_time

    @arrival_time.setter
    def arrival_time(self, arrival_time):
        """
        Sets the arrival_time of this Issue.
        Technician arrival time.

        :param arrival_time: The arrival_time of this Issue.
        :type: datetime
        """
        self._arrival_time = arrival_time

    @property
    def departure_time(self):
        """
        Gets the departure_time of this Issue.
        Technician departure time.

        :return: The departure_time of this Issue.
        :rtype: datetime
        """
        return self._departure_time

    @departure_time.setter
    def departure_time(self, departure_time):
        """
        Sets the departure_time of this Issue.
        Technician departure time.

        :param departure_time: The departure_time of this Issue.
        :type: datetime
        """
        self._departure_time = departure_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

